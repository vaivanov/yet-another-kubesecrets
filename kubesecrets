#!/bin/bash

function help() {
    echo -e "usage:            ${0} ACTION SECRET [OPTIONS]\n"
    echo -e "ACTION            What I must do: \"create\", \"decode\", \"modify-key\","
    echo -e "                  \"delete-key\", \"delete\", \"pull\" or \"push\""
    echo -e "SECRET            The secret to use"
    echo -e "[-n=namespace]    The namespace to retrieve the secret from (optional,"
    echo -e "                  defaults to the namespace of the current context, KUBENS or 'default')."
    echo -e "[-k=key]          key of variable (required for \"modify-key\" and \"delete-key\" actions)"
    echo -e "[-v=value]        value of variable (required for \"modify-key\" action)"
    echo -e "[-f=file]         path of dotenv file (required for \"create\", \"pull\" and \"push\" actions)"
    echo -e "[-b]              backup current secret to temp file before actions (optional, defaults to false)"
    echo -e "[--verbose]       verbose mode (optional, defaults to true)"
}

function check_field() {
    verbose_log "checking arg $1: ${2}"
    if [[ -z $2 ]]; then
        echo "Missing required argument: \"$1\"" 1>&2
        help
        exit 1
    fi
}

function check_secret_exists() {
    verbose_log "checking that secret exists in namespace"
    if echo "$(kubectl describe secrets/"${SECRET}" -n "${NAMESPACE}" 2>&1)" | grep "NotFound"; then
        if [[ -z "$1" ]]; then
            echo "Secret \"${SECRET}\" not founded in namespace \"${NAMESPACE}\"" 1>&2
        else
            echo "$1" 1>&2
        fi
        exit 1
    fi
    verbose_log "\"${SECRET}\" founded"
}

function check_secret_not_exists() {
    verbose_log "checking that secret exists in namespace"
    if [[ $(echo "$(kubectl describe secrets/"${SECRET}" -n "${NAMESPACE}" 2>&1)" | grep "NotFound") == "" ]]; then
        if [[ -z $1 ]]; then
            echo "Secret \"${SECRET}\" already exists in namespace \"${NAMESPACE}\"" 1>&2
        else
            echo "$1" 1>&2
        fi
        exit 1
    fi
    verbose_log "\"${SECRET}\" doesn't exist"
}

function check_namespace_exists() {
    verbose_log "checking that namespace exists"
    if echo "$(kubectl describe namespaces/"${NAMESPACE}" 2>&1)" | grep "NotFound"; then
        if [[ -z "$1" ]]; then
            echo "Namespace \"${NAMESPACE}\" not found" 1>&2
        else
            echo "$1" 1>&2
        fi
        exit 1
    fi
    verbose_log "\"${NAMESPACE}\" founded"
}

function decode() {
    for row in $(kubectl get secret "${SECRET}" -o json -n "${NAMESPACE}" | jq -c '.data | to_entries[]'); do
        echo "$(echo "${row}" | jq -r '.key')=$(echo "${row}" | jq -r '.value' | base64 --decode)"
    done
}

function env_to_json() {
    while read line || [ -n "$line" ];
    do
        local key=${line%%=*}
        local value=${line##*=}
        echo '{ "'${key}'": "'${value}'" }'
    done
}

function confirm() {
    local response
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            echo "Aborted" 1>&2
            false
            ;;
    esac
}

function verbose_log() {
    if [ "${VERBOSE:-"true"}" == "true" ]; then
        if [ ! -z "$2" ]; then
            printf "> [\033[3m%s\033[0m] \e[93m\033[3m%s\e[0m\n" "$1" "$2"
        else
            printf "> \e[93m\033[3m%s\e[0m\n" "$1"
        fi
    fi
}

function backup() {
    if [ "${BACKUP:-"false"}" == "true" ]; then
        verbose_log "Backup current values"
        tmpfilename=".${NAMESPACE}.${SECRET}.$(date "+%s").yaml"
        mktemp "$tmpfilename" 1>/dev/null
        kubectl get secret "${SECRET}" -o yaml -n "${NAMESPACE}" > $tmpfilename
    fi
}

if [ "${1}" == "-h" ]; then
    help
    exit 1
fi

if [[ -z "${1// }" ]]; then
    echo "Missing required argument (1): \"action\"" 1>&2
    help
    exit 1
fi
ACTION="$1"

if [[ -z "${2// }" ]]; then
    echo "Missing required argument (2): \"secret\"" 1>&2
    help
    exit 1
fi
SECRET="$2"

for i in "$@"
do
    case $i in
        -n=*|--namespace=*)
            NAMESPACE="${i#*=}"
        ;;
        -k=*|--key=*)
            KEY="${i#*=}"
        ;;
        -v=*|--value=*)
            VALUE="${i#*=}"
        ;;
        -f=*|--file=*)
            FILE="${i#*=}"
        ;;
        -b=*|--backup=*)
            BACKUP="${i#*=}"
        ;;
        --verbose=*)
            VERBOSE="${i#*=}"
        ;;
    esac
done

if [[ -z $NAMESPACE ]]; then
    context $(kubectl config get-contexts $(kubectl config current-context) --no-headers | tr -s ' ' | cut -d ' ' -f5)
    if [ ! -z "$context" ]; then
        verbose_log "No namespace set, using namespace from context: \"$context\""
        NAMESPACE="$context"
    else
        if [ ! -z "$KUBENS" ]; then
            verbose_log "No namespace set, using namespace from KUBENS: \"$KUBENS\""
            NAMESPACE="$KUBENS"
        else
            verbose_log "No namespace set, using default"
            NAMESPACE="default"
        fi
    fi
fi

check_namespace_exists

if [[ "${ACTION}" == "create" ]]; then
    check_field "file (-f)" $FILE
    check_secret_not_exists "Secret \"${SECRET}\" already exists in namespace \"${NAMESPACE}\". Please delete it first or use \"push\" action"

    verbose_log "creating secret \"${SECRET}\" in namespace \"${NAMESPACE}\""
    kubectl create secret generic ${SECRET} -n=${NAMESPACE} --from-env-file=${FILE} --save-config
    verbose_log "done"
    exit
fi

if [[ "${ACTION}" == "pull" ]]; then
    check_field "file (-f)" $FILE
    check_secret_exists

    if [[ ! -f $FILE ]]; then
        verbose_log "file \"${FILE}\" doesn't exist."
        verbose_log "getting secret \"${SECRET}\" from namespace \"${NAMESPACE}\", decoding it and save to file"

        decode > ${FILE}

        verbose_log "done"
        exit
    fi

    verbose_log "getting secret \"${SECRET}\" from namespace \"${NAMESPACE}\""

    kube_json_encoded=$(kubectl get secret "${SECRET}" -o json -n "${NAMESPACE}" 2>&1)
    kube_json_data=$(jq -c '.data | with_entries({ key, value: .value | @base64d })' <<< $kube_json_encoded)

    verbose_log "getting variables from file \"${FILE}\" and convert it to json"
    env_json_from_file=$(env_to_json < ${FILE} | jq -s '. | add')

    verbose_log "merging values"

    merged=$(echo "${env_json_from_file} ${kube_json_data}" | jq -s add)

    verbose_log "updating secrets - save new version of \"${FILE}\""

    for row in $(jq -c '. | to_entries[]' <<< $merged); do
        echo "$(echo "${row}" | jq -r '.key')=$(echo "${row}" | jq -r '.value')"
    done > ${FILE}

    verbose_log "done"
    exit
fi

if [[ "${ACTION}" == "push" ]]; then
    check_field "file (-f)" $FILE

    if [[ ! -f $FILE ]]; then
        verbose_log "file \"${FILE}\" doesn't exist."
        echo "file \"${FILE}\" doesn't exist." 1<&2
        exit
    fi

    verbose_log "getting secret \"${SECRET}\" from namespace \"${NAMESPACE}\""

    kube_json_encoded=$(kubectl get secret "${SECRET}" -o json -n "${NAMESPACE}" 2>&1)

    if echo "${kube_json_encoded}" | grep "NotFound"; then
        verbose_log "secret not founded in namepace, so we just create new secret from file \"${FILE}\""

        kubectl create secret generic ${SECRET} -n=${NAMESPACE} --from-env-file=${FILE} --save-config

        verbose_log "done"
        exit
    fi

    backup

    kube_json_data=$(jq -c '.data | with_entries({ key, value: .value | @base64d })' <<< $kube_json_encoded)

    verbose_log "getting variables from file \"${FILE}\" and convert it to json"

    env_json_from_file=$(env_to_json < ${FILE} | jq -s '. | add')

    verbose_log "merging values"

    merged=$(echo "${kube_json_data} ${env_json_from_file}" | jq -s add)
    merged_encoded=$(echo $merged | jq -c '. | with_entries({ key, value: .value | @base64 })')

    verbose_log "updating secrets - apply changes to k8s cluster"

    jq --argjson newdata "$merged_encoded" '.data=$newdata' <<< $kube_json_encoded | kubectl apply -f -

    verbose_log "done"
    exit
fi

if [[ "${ACTION}" == "decode" ]]; then
    check_secret_exists
    
    verbose_log "getting secret \"${SECRET}\" from namespace \"${NAMESPACE}\" and decoding it"

    decode

    verbose_log "done"

    exit
fi

if [[ "${ACTION}" == "modify-key" ]]; then
    check_field "key (-k)" $KEY
    check_field "value (-v)" $VALUE
    check_secret_exists

    backup

    verbose_log "getting secret \"${SECRET}\" from namespace \"${NAMESPACE}\""
    verbose_log "changing variable \"${KEY}\": set value=\"${VALUE}\""

    kubectl get secret ${SECRET} -o json -n ${NAMESPACE} | jq --arg value "$(echo "${VALUE}" | base64)" '.data["'${KEY}'"]=$value' | kubectl apply -f -

    verbose_log "done"
    exit
fi

if [[ "${ACTION}" == "delete-key" ]]; then
    check_field "key (-k)" $KEY
    check_secret_exists

    backup

    verbose_log "getting secret \"${SECRET}\" from namespace \"${NAMESPACE}\""
    verbose_log "deleting variable \"${KEY}\" from secret"

    echo -n "You are trying to delete \"${KEY}\" from \"${SECRET}\" secret."

    confirm && kubectl get secret ${SECRET} -o json -n ${NAMESPACE} | jq 'del(.data.'${KEY}')' | kubectl apply -f -

    verbose_log "done"
    exit
fi

if [[ "${ACTION}" == "delete" ]]; then
    check_secret_exists

    backup

    verbose_log "deleting secret \"${SECRET}\" from namespace \"${NAMESPACE}\""

    echo -n "You are trying to delete \"${SECRET}\" from \"${NAMESPACE}\" namespace. "
    confirm && kubectl delete secret ${SECRET} -n ${NAMESPACE}

    verbose_log "done"
    exit
fi
